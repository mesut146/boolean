options
{
    JAVA_UNICODE_ESCAPE = true;
    LOOKAHEAD=3;
    STATIC=false;
}

PARSER_BEGIN(BooleanParser)

package com.mesut.bool.parser;

import com.mesut.bool.operators.*;
import com.mesut.bool.core.*;

public class BooleanParser
{
 
}
PARSER_END(BooleanParser)

TOKEN:
{
    <ZERO: "0" >
  | <ONE: "1" >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < QUOTE: "'" >
}

TOKEN:
{
  <EQ: "=" >
| <MINUS: "-">
| <DIV: "/">
}

TOKEN: /*built in functions */
{
  <AND: "and" | "*" | "." | "&&" | "&" >
| <OR: "or" | "+" | "||" | "|" >
| <XOR: "xor" | "^" >
| <NOR: "nor" >
| <NAND: "nand" >
| <XNOR: "xnor" >
| <NOT: "not">
}

/*TOKEN:
{
  <#DIGIT: ["0"-"9"] >
}*/

TOKEN:
{
  <IDENT: <CHAR> ( <CHAR> | ["0"-"9"] | "_" )*>
| <#CHAR: ["a"-"z","A"-"Z"]>
}

SKIP : {
    " "  |   "\r"  |  "\n"  |  "\t"
}


func line():
{
  func f;
}
{
  f=expr() <EOF>
  {return f;}
}

func expr():
{
  func a,b;
}
{
  a=term()
  (<OR> b=expr(){a=new or(a,b);}
  |<XOR> b=expr(){a=new xor(a,b);}
  |<NOR> b=expr(){a=new nor(a,b);}
  |<XNOR> b=expr(){a=new xnor(a,b);} )*
  {return a;}
}

func term():
{
 func a,b;
}
{
  a=unary()
  ( <AND> b=term(){a=new and(a,b);}
  |<NAND> b=term(){a=new nand(a,b);} )*
  {return a;}
}

func unary():
{
  func a;
  boolean not=false;
}
{
   [("~" | "!"){not=true;}] a=element() [ ("!" | "'") {not=true;}]
  {
    if(not){
      return new not(a);
    }
    return a;
  }
}

func element():
{
  func a;
}
{
    a=cons(){return a;}
  | a=var(){return a;}
  | "(" a=expr() ")" {return a;}
}

cons cons():
{
  cons c;
}
{
 ( "0"{c=cons.LOW;} | "1" { c=cons.HIGH; } )
  { return c; }
}

variable var():
{
  var v;
  Token token;
}
{
  token=<IDENT> { return new variable(token.toString()); }
}
